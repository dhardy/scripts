#!/usr/bin/env python
# -*- coding: utf-8 -*-
# A script to backup one or more directories via r-sync. It handles by-date
# naming of backups and stores duplicate files with hard-links, as well as
# making sure incomplete backups don't get confused with completed ones.
# Usage: plug in you backup disk and mount it, then run
# ./ext-disk-rsync BACKUP_DIR
# where BACKUP_DIR is the path to the base backup folder. Each backup source
# will be put in a sub-folder of this. Delete old backups by hand as necessary.

import subprocess
import shlex
import sys
from unipath import Path

# ———  definitions  ———
# Put locations to backup here:
#sources=["/home/"]#,"/"]
#sources=["/home/dhardy/rtest/source/"]
sources=["/"]
# and, for each location, a list of exclude rules. See rsync manual for details,
# but in brief: patterns starting with a slash like "/foo" are paths relative
# to the source directory, patterns ending with a slash like "somedir/" match
# only directories, while other patterns match any file/dir/symlink/...
# Patterns may include *, **, ?, [...].
#excludes=[
    #["/*/.googleearth/Cache/", "/*/.local/share/Trash/", "/*/.android/avd/",
    #"/*/.ccache/", "/dhardy/download/", "/*/.cache/", "/*/.gvfs/",
    #"*.o","*.class"]#,
    ##["/dev/", "/media/", "/proc/", "/tmp/", "/var/tmp/", "/var/cache/"]
#]
#exclude_files = ["/home/dhardy/rtest/excludes"]
exclude_files=[""]
# set to true to check every file with a checksum
checksum=True
rsync="/home/dhardy/download/rsync-3.0.9/rsync"

#  ———  functions  ———

def call_command(command, pipe=None):
    process = subprocess.Popen(shlex.split(command),
    stdin=subprocess.PIPE,
    stdout=subprocess.PIPE,
    stderr=subprocess.PIPE)
    output=process.communicate(input=pipe)
    return output

def do_backup(source,backup_dest,exclude_file):
    bpath=backup_dest.child(bname)
    bptmp=backup_dest.child(btmp)
    if bpath.exists():
        print "Error:",bpath,"already exists!"
        sys.exit(1)
    if bptmp.exists():
        print "Error:",bptmp,"already exists!"
        sys.exit(1)
    
    if bptmp.mkdir():
        print "Unable to create backup dir",bptmp
        sys.exit(1)
    
    prevComplete=backup_dest.child("latest-complete")
    
    print "Creating new backup in",bptmp,"..."
    
    """
    See http://www.sanitarium.net/golug/rsync_backups_2010.html
    other args:
    --verbose --progress --itemize-changes
    """
    args=[rsync,
        "--one-file-system",
        "--archive","--hard-links","--human-readable","--inplace","--numeric-ids",
        "--delete","--delete-excluded"]
    exclude_path=Path(exclude_file)
    if exclude_path.exists():
        args += ["exclude-from="+exclude_path.absolute()]
    if checksum:
        args += ["--checksum"]
    if prevComplete.isdir():
        args += ["--link-dest="+prevComplete.absolute()]
    args += [source,bptmp]
    subprocess.call(["echo"]+args)
    retcode = subprocess.call(args)
    
    if retcode:
        print "Error; partial backup in:",bptmp
    else:
        bptmp.rename(bpath)
        if prevComplete.islink():
            prevComplete.remove()
        if not prevComplete.exists():
            prevComplete.write_link(bname)
        print "Successfully backed up to:",bpath

#  ———  script  ———

#if int(call_command("id -u")[0]) != 0:
    #print "Please run as root."
    #sys.exit(1)

dest = None
if len(sys.argv) == 2:
    dest = Path(sys.argv[1])

if dest==None or not dest.isdir():
    print "Usage:",sys.argv[0],"backup-dest"
    print "Path should be a directory to contain new backups."
    sys.exit(1)

bname=call_command("date -u '+%F-%T'")[0].strip()
btmp=bname+"-incomplete"

for i in range(len(sources)):
    source = sources[i]
    if source == "/":
        sdest = dest.child("root")
    else:
        sdest = dest.child(Path(source.rstrip('/')).name)
    sdest.mkdir()
    do_backup(source,sdest,exclude_files[i])
