#!/bin/sh
# rm with different semantics

#real rm:
RM=/bin/rm
SELF=$0
HELP=""
FORCE=""
RECURSE=""
PARENT=""
SKIP_NE_DIR=""

while test $# -ne 0; do
    arg=$1
    shift
    
    # Match options
    case $arg in
        (-f)
            FORCE="t"
            continue;;
        (-r)
            RECURSE="t"
            continue;;
        (-p)
            PARENT="t"
            continue;;
        (--skip-non-empty-dir)
            SKIP_NE_DIR="t"
            continue;
        (-h)
            HELP="t"
            break;;
        (-*)
            echo "Illegal argument: $arg"
            HELP="t"
            break;;
    esac
    
    # Match paths (should really happen after all options have been matched,
    # but I can't work out how to do that properly in sh)
    if [ -L "$arg" ]; then
        # is a link, just delete
        $RM -f "$arg"
    elif [ -d "$arg" ]; then
        if [ -n "$FORCE" ]; then
            $RM -rf "$arg"
        elif [ -n "$SKIP_NE_DIR" ]; then
            rmdir --ignore-fail-on-non-empty "$arg"
        elif [ -n "$RECURSE" ]; then
            # might not work well for large directories, but can be killed if troublesome
            for rec in $(find "$arg" | sort -r); do
                $SELF --skip-non-empty-dir "$rec"
            done
        else
            rmdir --ignore-fail-on-non-empty "$arg"
            if [ -d "$arg" ]; then
                read -p "rm: recursively remove directory \`$arg\`? " q
                if [ "$q" = "y" ]; then
                    $RM -rf "$arg"
                fi
            fi
        fi
    elif [ -e "$arg" ]; then
        if [ -n "$FORCE" ]; then
            $RM -f "$arg"
        else
            $RM -i "$arg"
        fi
    else
        echo "rm: \`$arg\` is not a file, link or directory"
    fi
    
    # Now do the -p bit
    if [ -n "$PARENT" ]; then
        rmdir --parents --ignore-fail-on-non-empty $(dirname "$arg")
    fi
done

if [ -n "$HELP" ]; then
    echo "Usage: $0 [OPTIONS] PATHS"
    echo "Deletes each PATH listed in a more sensible way than standard rm: does not prompt when deleting symbolic links or empty directories."
    echo ""
    echo "Options (must preceed paths to have an effect):"
    echo "    -h\tPrint this message."
    echo "    -f\tDelete without confirmation."
    echo "    -r\tRecursively remove a directory and its contents, asking on each file found"
    echo "    -p\tAlso remove empty parent directories (as 'rmdir -p' does)"
    echo "    --skip-non-empty-dir\tWhen encountering a non-empty directory, do not attempt to delete it."
    exit 1
fi
